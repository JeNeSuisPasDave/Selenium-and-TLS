# Copyright 2017 David Hein
#
# Licensed under the MIT License. If the LICENSE file is missing, you
# can find the MIT license terms here: https://opensource.org/licenses/MIT

# Based on work published at
# https://github.com/JeNeSuisPasDave/asd-sync-src-to-container
# Modified from sync-to-dv-container/run.sh.

# function data_volume_exists()
#
# Checks whether the source data volume container exists.
#
# Args:
#   1: data volume container name (e.g. "dv-example-src")
#
# Return code is 0 if it exists; otherwise, 1 or, if errors, 2.
#
function data_volume_exists() {
  if (( 1 != $#)); then
    local msg_="ERROR: expecting one and only one argument for"
    msg_="${msg_} data_volume_exists()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local lcs_=( $( docker ps -aq -f name=$1 | wc -l ) )
  local lc_=${lcs_[0]}
  if (( 0 == lc_ )); then
    return 1
  fi
  return 0
}

# function data_volume_exists()
#
# Checks whether the source data volume container exists.
#
# Args:
#   1: image tag (e.g. "datihein/rsync-alpine:latest")
#   2: data volume container name (e.g. "dv-example-src")
#   3: Data volume target directory path (e.g. "/")
#
# Return code is 0 if it exists; otherwise, 1 or, if errors, 2.
#
function create_data_volume_container() {
  if (( 3 != $#)); then
    local msg_="ERROR: expecting three arguments for"
    msg_="${msg_} create_data_volume_container()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local img_="$1"
  local dvname_="$2"
  local tgtdir_="$3"
  docker create -v "${tgtdir_}" --name "${dvname_}" \
    "${img_}" \
    /bin/true
}

# function docker_host_workdir_exists()
#
# Checks whether the Docker VM working directory exists.
#
# Args:
#   1: Docker machine name (e.g. "default")
#   2: Host working directory (e.g. "/xyzzy")
#
# Exit code is 0 if it exists; otherwise, 2 or, if errors, 2.
#
function docker_host_workdir_exists() {
  if (( 2 != $#)); then
    local msg_="ERROR: expecting two arguments for"
    msg_="${msg_} docker_host_workdir_exists()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local dm_="$1"
  local workdir_="$2"
  local cmd_="/bin/sh -c 'if [ -d \"${workdir_}\" ]; "
  cmd_="${cmd_}then echo \"yep\"; else echo \"nope\"; fi'"
  local result_=$( docker-machine ssh ${dm_} ${cmd_} )
  if [ "yep" == "${result_}" ]; then
    return 0
  fi
  return 1
}

# function docker_host_create_workdir()
#
# Args:
#   1: Docker machine name (e.g. "default")
#   2: Host working directory (e.g. "/xyzzy")
#
# Creates the Docker VM working directory
#
function docker_host_create_workdir() {
  if (( 2 != $#)); then
    local msg_="ERROR: expecting two arguments for"
    msg_="${msg_} docker_host_create_workdir()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local dm_="$1"
  local workdir_="$2"
  local cmd_="/bin/sh -c 'sudo mkdir -p \"${workdir_}\"; "
  cmd_="${cmd_} sudo chown docker:staff \"${workdir_}\"'"
  docker-machine ssh ${DKR_MACHINE_} ${cmd_}
  local rc_=$?
  return $rc_
}

# function docker_host_remove_workdir()
#
# Args:
#   1: Docker machine name (e.g. "default")
#   2: Host working directory (e.g. "/xyzzy")
#
# Creates the Docker VM working directory
#
function docker_host_remove_workdir() {
  if (( 2 != $#)); then
    local msg_="ERROR: expecting two arguments for"
    msg_="${msg_} docker_host_create_workdir()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local dm_="$1"
  local workdir_="$2"
  local cmd_="/bin/sh -c 'sudo rm -r \"${workdir_}\"'"
  docker-machine ssh ${DKR_MACHINE_} ${cmd_}
  local rc_=$?
  return $rc_
}

# function rsync_src_to_workdir()
#
# Args:
#   1: Docker machine name (e.g. "default")
#   2: Docker machine IP address (e.g. "192.168.99.100")
#   3: Local source directory (e.g. "src")
#   4: Host working directory (e.g. "/xyzzy")
#   5: Ignore times during rsync (0 = no, use times; 1 = yes, ignore times)
#
# Rsyncs the source director to the working directory
#
function rsync_src_to_workdir() {
  if (( 5 != $#)); then
    local msg_="ERROR: expecting five arguments for"
    msg_="${msg_} rsync_src_to_workdir()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local dm_="$1"
  local ip_="$2"
  local srcdir_="$3"
  local workdir_="$4"
  local opts_="-rptv"
  local opts2_=""
  if (( 0 != $5 )); then
    opts_="-rptIv"
    opts2_="--delete"
  fi
  rsync -e "ssh -i ${HOME}/.docker/machine/machines/${dm_}/id_rsa" \
    ${opts_} ${opts2_} "${srcdir_}" "docker@${ip_}:${workdir_}"
  local rc_=$?
  return $rc_
}

# function rsync_workdir_to_src()
#
# Args:
#   1: Docker machine name (e.g. "default")
#   2: Docker machine IP address (e.g. "192.168.99.100")
#   3: Host working directory (e.g. "/xyzzy")
#   4: Local source directory (e.g. "src")
#   5: Ignore times during rsync (0 = no, use times; 1 = yes, ignore times)
#
# Rsyncs the source director to the working directory
#
function rsync_workdir_to_src() {
  if (( 5 != $#)); then
    local msg_="ERROR: expecting five arguments for"
    msg_="${msg_} rsync_workdir_to_src()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local dm_="$1"
  local ip_="$2"
  local srcdir_="$3"
  local workdir_="$4"
  local opts_="-rptv"
  local opts2_=""
  if (( 0 != $5 )); then
    opts_="-rptIv"
    opts2_="--delete"
  fi
  rsync -e "ssh -i ${HOME}/.docker/machine/machines/${dm_}/id_rsa" \
    ${opts_} ${opts2_} "docker@${ip_}:${srcdir_}" "${workdir_}"
  local rc_=$?
  return $rc_
}

# function rsync_workdir_to_dv()
#
# Args:
#   1: Data volume container name (e.g. "dv-example-src")
#   2: Host working directory (e.g. "/xyzzy")
#   3: rsync image tag (e.g. "datihein/rsync-alpine:latest")
#   4: Host source directory path (e.g. "/xyzzy/src")
#   5: Data volume target directory path (e.g. "/")
#   6: Ignore times during rsync (0 = no, use times; 1 = yes, ignore times)
#
# Rsyncs the source directory to the target directory
#
# Note: 'rsync -rpt "/xyzzy/src" "/"' will create a "/src" directory at the
#       target.
#
function rsync_workdir_to_dv() {
  if (( 6 != $#)); then
    local msg_="ERROR: expecting six arguments for"
    msg_="${msg_} rsync_workdir_to_dv()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local dvname_="$1"
  local workdir_="$2"
  local img_="$3"
  local srcdir_="$4"
  local tgtdir_="$5"
  local opts_="-rptv"
  local opts2_=""
  if (( 0 != $6 )); then
    opts_="-rptIv"
    opts2_="--delete"
  fi
  docker run -i -t --rm  \
    --volumes-from "${dvname_}" \
    -v "${workdir_}:${workdir_}" \
    "${img_}" \
    rsync ${opts_} ${opts2_} "${srcdir_}" "${tgtdir_}"
  local rc_=$?
  return $rc_
}

# function rsync_dv_to_workdir()
#
# Args:
#   1: Data volume container name (e.g. "dv-example-src")
#   2: Host working directory (e.g. "/xyzzy")
#   3: rsync image tag (e.g. "datihein/rsync-alpine:latest")
#   4: Data volume target directory path (e.g. "/")
#   5: Host source directory path (e.g. "/xyzzy/src")
#   6: Ignore times during rsync (0 = no, use times; 1 = yes, ignore times)
#
# Rsyncs the source directory to the target directory
#
# Note: 'rsync -rpt "/xyzzy/src" "/"' will create a "/src" directory at the
#       target.
#
function rsync_dv_to_workdir() {
  if (( 6 != $#)); then
    local msg_="ERROR: expecting six arguments for"
    msg_="${msg_} rsync_dv_to_workdir()."
    echo "${msg_}" > /dev/stderr
    return 2
  fi
  local dvname_="$1"
  local workdir_="$2"
  local img_="$3"
  local srcdir_="$4"
  local tgtdir_="$5"
  local opts_="-rptv"
  local opts2_=""
  local opts3_="--exclude=__pycache__"
  if (( 0 != $6 )); then
    opts_="-rptIv"
    opts2_="--delete"
  fi
  docker run -i -t --rm  \
    --volumes-from "${dvname_}" \
    -v "${workdir_}:${workdir_}" \
    "${img_}" \
    rsync ${opts_} ${opts2_} ${opts3_} "${srcdir_}" "${tgtdir_}"
  local rc_=$?
  return $rc_
}
